# Database Configuration - Direct connection to Neon database
# Hardcoded for Render deployment
spring.datasource.url=jdbc:postgresql://neondb_owner:npg_WkTIcf54tiRr@ep-damp-fire-a4vpqf3p-pooler.us-east-1.aws.neon.tech/neondb?sslmode=require&channel_binding=require
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA/Hibernate Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true

# Server Configuration - Uses PORT environment variable for Render
server.port=${PORT:8080}
server.servlet.context-path=/

# CORS Configuration - Allows frontend domain
spring.web.cors.allowed-origins=${FRONTEND_URL:http://localhost:3000}
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.web.cors.allowed-headers=*
spring.web.cors.allow-credentials=true

# Logging Configuration - Less verbose for production
logging.level.com.ug.portal=${LOG_LEVEL:INFO}
logging.level.org.springframework.web=WARN
logging.level.org.hibernate.SQL=WARN
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=WARN

# Application Configuration
app.name=University of Ghana Student Portal
app.version=1.0.0
